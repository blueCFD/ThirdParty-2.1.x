#!/bin/sh
#------------------------------------------------------------------------------
# License
#    This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#    For more information about these patches, visit:
#         http://www.bluecape.com.pt/blueCFD
#
#    It's based on the file with the same name available here:
#         https://github.com/wyldckat/ThirdParty-2.0.x/tree/binutils
#
#    OpenFOAM's official site: http://www.openfoam.com
#
#    OpenFOAM is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     makeMinGWMake
#
# Description
#     Experimental build script for Make and MinGW.
#     Note: doesn't work the way it was expected. Either the resulting make 
#     must only be used on pure Windows, or has to be built with a pure MSys
#     shell. The reason is simple: without a strict MSys, it won't depend on
#     MSys*.dll's, therefore paths get "tortured and mangled".
#
#------------------------------------------------------------------------------
makePACKAGE=`. etc/defaults.sh ; echo make-\$make_version`

#------------------------------------------------------------------------------
# run from third-party directory only
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
. etc/tools/ThirdPartyFunctions
. etc/tools/makeExtraThirdPartyFunctions
#------------------------------------------------------------------------------

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/} [make-VERSION]

* cross-compile make for MinGW
      $makePACKAGE

USAGE
    exit 1
}

case $WM_COMPILER in
mingw32 | mingw-w32)
  echo "This compiler $WM_COMPILER is currently supported for cross-compiling Make."
  TARGET=i686-pc-mingw32 #32bits
  ;;
mingw-w64)
  echo "This compiler $WM_COMPILER is currently supported for cross-compiling Make."
  TARGET=x86_64-w64-mingw32 #64bits
  ;;
*)
  echo "Error: this compiler $WM_COMPILER is not supported for cross-compiling Make."
  exit 1
  ;;
esac

# parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage
        ;;
    make-[2-9]*)
        makePACKAGE="${1%%/}"
        shift
        ;;
    *)
        usage "unknown option/argument: '$*'"
        ;;
    esac
done


#------------------------------------------------------------------------------
PREFIX="${WM_COMPILER_DIR}_win"
CONFIGHOST="--host=${TARGET}"
buildBASE="${buildBASE}_win"

sourceDIR=$WM_THIRD_PARTY_DIR/$makePACKAGE
buildDIR=$buildBASE/$makePACKAGE

#Download and unpack the source code
if [ ! -d "$sourceDIR" ]; then
  ./get-em so make=default
fi
  
#
# Build Make
#
echo "---------------"
if [ ! -d "$PREFIX" ]; then
    echo "The cross-compiled gcc+mingw isn't built yet."

elif [ ! -d "${WM_COMPILER_DIR}" ]; then
    echo "The cross-compiler gcc+mingw isn't built yet."

elif [ ! -d "$sourceDIR" ]; then
    echo "Make source package not ready yet. Run: ./get-em so make=default"

else
    echo "Starting build: $makePACKAGE"
    echo
(
    cd $sourceDIR || exit 1
    if [ ! -e "mingw.patch.complete" ]; then
        chmod -R +w *
        #Source for patch: http://lists.gnu.org/archive/html/make-w32/2011-07/msg00002.html
        patch -p1 < $WM_THIRD_PARTY_DIR/etc/patches/windows_jobserver.diff && \
          touch mingw.patch.complete
    fi
  
    make distclean 2>/dev/null

    rm -rf $buildDIR
    mkdir -p $buildDIR
    cd $buildDIR

    set -x
    $sourceDIR/configure \
        --prefix=$PREFIX $CONFIGHOST \
    && make -j $WM_NCOMPPROCS \
    && make install \
    && echo "Built: $makePACKAGE"
) || {
    echo "Error building: $makePACKAGE"
    exit 1
}
fi

# ----------------------------------------------------------------- end-of-file
