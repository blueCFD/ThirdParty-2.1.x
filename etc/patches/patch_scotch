diff --git a/src/Make.inc/Makefile.inc.i686_pc_mingw32 b/src/Make.inc/Makefile.inc.i686_pc_mingw32
index 11daf6b..7e9d747 100644
--- a/src/Make.inc/Makefile.inc.i686_pc_mingw32
+++ b/src/Make.inc/Makefile.inc.i686_pc_mingw32
@@ -8,8 +8,7 @@
 # Since all files are linked with the MPI libraries, this file is
 # for compiling PT-Scotch only. To compile Scotch, remove the
 # -DSCOTCH_PTSCOTCH flag, as well as all references to MPI in the
-# CFLAGS and CLIBFLAGS	=
-LDFLAGS variables.
+# CFLAGS and CLIBFLAGS	= LDFLAGS variables.
 
 EXE			=
 LIB			= .a
diff --git a/src/Makefile b/src/Makefile
index 574a3b0..779992f 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -62,6 +62,10 @@ libdir		?= $(prefix)/lib
 datarootdir	?= $(prefix)/share
 mandir		?= $(datarootdir)/man
 
+LIBLDFLAGS_PT	?= $(LIBLDFLAGS)
+LDFLAGS_PT	?= $(LDFLAGS)
+INSTLIB		?= $(LIB)
+
 ../bin				:
 					-$(MKDIR) ../bin
 
@@ -102,7 +106,7 @@ ptscotch			:	required
 install				:	required	$(bindir)	$(includedir)	$(libdir)	$(mandir)/man1
 					-$(CP) -f ../bin/[agm]*$(EXE) $(bindir)
 					-$(CP) -f ../include/*scotch*.h $(includedir)
-					-$(CP) -f ../lib/*scotch*$(LIB) $(libdir)
+					-$(CP) -f ../lib/*scotch*$(CPLIB) $(libdir)
 					-$(CP) -Rf ../man/* $(mandir)
 
 clean				:	required
diff --git a/src/libscotch/Makefile b/src/libscotch/Makefile
index d9d4bec..e4cd8c4 100644
--- a/src/libscotch/Makefile
+++ b/src/libscotch/Makefile
@@ -39,6 +39,11 @@ libdir		= ../../lib
 
 include ../Makefile.inc
 
+LIBLDFLAGS_PT  ?= $(LIBLDFLAGS)
+LDFLAGS_PT ?= $(LDFLAGS)
+CCSS ?= $(CCS)
+CPLIB  ?= $(LIB)
+
 %$(OBJ)	:	%.c
 				$(CC) $(CFLAGS) $(CLIBFLAGS) -c $(<) -o $(@)
 
@@ -52,33 +57,32 @@ include ../Makefile.inc
 .PHONY				:	ptscotch	scotch	ptinstall	install	clean	realclean
 
 scotch				:	clean
-					$(MAKE) CC="$(CCS)" CCD="$(CCS)"	\
+					$(MAKE) CC="$(CCS)" CCD="$(CCSS)"	\
 					scotch.h				\
 					scotchf.h				\
-					libscotch$(LIB)				\
 					libscotcherr$(LIB)			\
-					libscotcherrexit$(LIB)
+					libscotcherrexit$(LIB)			\
+					libscotch$(LIB)
 
 ptscotch			:	clean
-					$(MAKE) CFLAGS="$(CFLAGS) -DSCOTCH_PTSCOTCH" CC="$(CCP)"	\
+					$(MAKE) CFLAGS="$(CFLAGS) -DSCOTCH_PTSCOTCH" CC="$(CCP)" CCD="$(CCSS)"	\
 					scotch.h							\
 					scotchf.h							\
-					libptscotch$(LIB)						\
-					libscotch$(LIB)							\
 					libptscotcherr$(LIB)						\
-					libptscotcherrexit$(LIB)
+					libptscotcherrexit$(LIB)					\
+					libptscotch$(LIB)
 
 install				:
 					-$(CP) scotch.h scotchf.h $(includedir)
-					-$(CP) libscotch$(LIB) libscotcherr*$(LIB) $(libdir)
+					-$(CP) libscotch$(CPLIB) libscotcherr*$(CPLIB) $(libdir)
 
 ptinstall			:
 					-$(CP) scotch.h $(includedir)/ptscotch.h
 					-$(CP) scotchf.h $(includedir)/ptscotchf.h
-					-$(CP) libptscotch*$(LIB) $(libdir)
+					-$(CP) libptscotch*$(CPLIB) $(libdir)
 
 clean				:
-					-$(RM) *~ *$(OBJ) lib*$(LIB) parser_yy.c parser_ly.h parser_ll.c *scotch.h *scotchf.h y.output dummysizes$(EXE)
+					-$(RM) *~ *$(OBJ) lib*$(LIB) lib*.def lib*.a parser_yy.c parser_ly.h parser_ll.c *scotch.h *scotchf.h y.output dummysizes$(EXE)
 
 realclean			:	clean
 
@@ -2515,7 +2519,7 @@ dummysizes$(EXE)		:	dummysizes.c				\
 					mapping.h				\
 					order.h					\
 					parser.h
-			 		$(CCD) $(CFLAGS) -DSCOTCH_VERSION=$(VERSION) -DSCOTCH_RELEASE=$(RELEASE) -DSCOTCH_PATCHLEVEL=$(PATCHLEVEL) $(<) -o $(@) $(LDFLAGS)
+					$(CCD) $(CFLAGS) -DSCOTCH_VERSION=$(VERSION) -DSCOTCH_RELEASE=$(RELEASE) -DSCOTCH_PATCHLEVEL=$(PATCHLEVEL) $(<) -o $(@) $(LDFLAGS)
 
 scotch.h			:	dummysizes$(EXE)			\
 					library.h
@@ -2526,19 +2530,19 @@ scotchf.h			:	dummysizes$(EXE) 			\
 					./dummysizes$(EXE) libraryf.h scotchf.h
 
 libptscotch$(LIB)		:	$(LIBPTSCOTCHDEPS) $(LIBSCOTCHDEPS)
-					$(AR) $(ARFLAGS) $(@) $(?)
+					$(AR) $(ARFLAGS) $(@) $(?) $(ARPFLAGS)
 					-$(RANLIB) $(@)
 
 libscotch$(LIB)			:	$(LIBSCOTCHDEPS)
-					$(AR) $(ARFLAGS) $(@) $(?)
+					$(AR) $(ARFLAGS) $(@) $(?) $(ARSFLAGS)
 					-$(RANLIB) $(@)
 
 libptscotcherr$(LIB)		:	library_error$(OBJ)
-					$(AR) $(ARFLAGS) $(@) $(?)
+					$(AR) $(ARFLAGS) $(@) $(?) $(LDFLAGS_P1_PT)
 					-$(RANLIB) $(@)
 
 libptscotcherrexit$(LIB)	:	library_error_exit$(OBJ)
-					$(AR) $(ARFLAGS) $(@) $(?)
+					$(AR) $(ARFLAGS) $(@) $(?) $(LDFLAGS_P1_PT)
 					-$(RANLIB) $(@)
 
 libscotcherr$(LIB)		:	library_error$(OBJ)
diff --git a/src/libscotch/cpscotch_headers.sh b/src/libscotch/cpscotch_headers.sh
new file mode 100644
index 0000000..347b033
--- /dev/null
+++ b/src/libscotch/cpscotch_headers.sh
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+mingw_version=$1
+
+touch dummysizes.exe
+chmod 744 dummysizes.exe
+echo "#!/bin/sh" > dummysizes.exe
+echo 'if [ -z "`echo '"'" $* "'"' | grep PTSCOTCH`" ]; then' >> dummysizes.exe
+echo "cat \$2_${mingw_version}_${WM_MPLIB} | sed 's=\#define SCOTCH_PTSCOTCH=\#define SCOTCH_SEQSCOTCH=' > \$2" >> dummysizes.exe
+echo "else" >> dummysizes.exe
+echo "cp \$2_${mingw_version}_${WM_MPLIB} \$2" >> dummysizes.exe
+echo "fi" >> dummysizes.exe
diff --git a/src/libscotch/library_dgraph_stat.c b/src/libscotch/library_dgraph_stat.c
index ad77aca..24fce3f 100644
--- a/src/libscotch/library_dgraph_stat.c
+++ b/src/libscotch/library_dgraph_stat.c
@@ -60,8 +60,13 @@
 **  The static variables.
 */
 
+#if defined(WIN32) || defined(WIN64)
+#define DEFERRED_ADDRESS(address) 0
+#else
+#define DEFERRED_ADDRESS(address) address
+#endif
 static int                  dgraphstatblentab[2] = { 7, 3 };
-static MPI_Datatype         dgraphstattypetab[2] = { GNUM_MPI, MPI_DOUBLE };
+static MPI_Datatype         dgraphstattypetab[2] = { DEFERRED_ADDRESS(GNUM_MPI), DEFERRED_ADDRESS(MPI_DOUBLE) };
 
 /************************************/
 /*                                  */
@@ -145,6 +150,12 @@ double *                    edlodltptr)
   double              edlolocdlt;
   int                 o;
 
+#if defined(WIN32) || defined(WIN64)
+  //Had to re-route the initiallization of dgraphstattypetab, for compatibility with MinGW dllimports
+  dgraphstattypetab[0] = GNUM_MPI;
+  dgraphstattypetab[1] = MPI_DOUBLE;
+#endif
+
   srcgrafptr = (Dgraph *) grafptr;
 
   velolocdlt = 0.0L;
diff --git a/src/libscotch/scotch.h_mingw32_ b/src/libscotch/scotch.h_mingw32_
new file mode 100644
index 0000000..7fc195f
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw32_
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : ptscotch.h                              **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_SEQSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[8];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[10];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[11];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[8];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw32_MPICH b/src/libscotch/scotch.h_mingw32_MPICH
new file mode 100644
index 0000000..b2ed06d
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw32_MPICH
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : scotch.h                                **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_PTSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[20];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[7];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[4];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[9];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[10];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[11];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[8];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw32_MSMPI b/src/libscotch/scotch.h_mingw32_MSMPI
new file mode 100644
index 0000000..b2ed06d
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw32_MSMPI
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : scotch.h                                **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_PTSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[20];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[7];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[4];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[9];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[10];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[11];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[8];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw32_OPENMPI b/src/libscotch/scotch.h_mingw32_OPENMPI
new file mode 100644
index 0000000..b2ed06d
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw32_OPENMPI
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : scotch.h                                **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_PTSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[20];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[7];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[4];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[9];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[10];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[11];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[8];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw64_ b/src/libscotch/scotch.h_mingw64_
new file mode 100644
index 0000000..a709f8f
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw64_
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : ptscotch.h                              **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_SEQSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[2];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[12];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[15];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[13];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[12];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw64_MPICH b/src/libscotch/scotch.h_mingw64_MPICH
new file mode 100644
index 0000000..0fc7107
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw64_MPICH
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : scotch.h                                **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_PTSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[29];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[9];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[2];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[14];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[15];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[13];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[12];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw64_MSMPI b/src/libscotch/scotch.h_mingw64_MSMPI
new file mode 100644
index 0000000..0fc7107
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw64_MSMPI
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : scotch.h                                **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_PTSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[29];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[9];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[2];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[14];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[15];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[13];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[12];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotch.h_mingw64_OPENMPI b/src/libscotch/scotch.h_mingw64_OPENMPI
new file mode 100644
index 0000000..d22bdbf
--- /dev/null
+++ b/src/libscotch/scotch.h_mingw64_OPENMPI
@@ -0,0 +1,327 @@
+/* Copyright 2004,2007-2010 ENSEIRB, INRIA & CNRS
+**
+** This file is part of the Scotch software package for static mapping,
+** graph partitioning and sparse matrix ordering.
+**
+** This software is governed by the CeCILL-C license under French law
+** and abiding by the rules of distribution of free software. You can
+** use, modify and/or redistribute the software under the terms of the
+** CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+** URL: "http://www.cecill.info".
+** 
+** As a counterpart to the access to the source code and rights to copy,
+** modify and redistribute granted by the license, users are provided
+** only with a limited warranty and the software's author, the holder of
+** the economic rights, and the successive licensors have only limited
+** liability.
+** 
+** In this respect, the user's attention is drawn to the risks associated
+** with loading, using, modifying and/or developing or reproducing the
+** software by the user in light of its specific status of free software,
+** that may mean that it is complicated to manipulate, and that also
+** therefore means that it is reserved for developers and experienced
+** professionals having in-depth computer knowledge. Users are therefore
+** encouraged to load and test the software's suitability as regards
+** their requirements in conditions enabling the security of their
+** systems and/or data to be ensured and, more generally, to use and
+** operate it in the same conditions as regards security.
+** 
+** The fact that you are presently reading this means that you have had
+** knowledge of the CeCILL-C license and that you accept its terms.
+*/
+/************************************************************/
+/**                                                        **/
+/**   NAME       : scotch.h                                **/
+/**                                                        **/
+/**   AUTHOR     : Francois PELLEGRINI                     **/
+/**                                                        **/
+/**   FUNCTION   : Declaration file for the LibScotch      **/
+/**                static mapping and sparse matrix block  **/
+/**                ordering library.                       **/
+/**                                                        **/
+/**   DATES      : # Version 3.2  : from : 07 sep 1996     **/
+/**                                 to     22 aug 1998     **/
+/**                # Version 3.3  : from : 02 oct 1998     **/
+/**                                 to     31 may 1999     **/
+/**                # Version 3.4  : from : 10 oct 1999     **/
+/**                                 to     15 nov 2001     **/
+/**                # Version 4.0  : from : 11 dec 2001     **/
+/**                                 to     20 dec 2005     **/
+/**                # Version 5.0  : from : 26 apr 2006     **/
+/**                                 to   : 20 feb 2008     **/
+/**                # Version 5.1  : from : 30 nov 2007     **/
+/**                                 to   : 17 nov 2010     **/
+/**                                                        **/
+/************************************************************/
+
+/*
+**  The type and structure definitions.
+*/
+
+/*+ Version flags. +*/
+
+#define SCOTCH_VERSION 5
+#define SCOTCH_RELEASE 1
+#define SCOTCH_PATCHLEVEL 10
+
+/*+ Parallel processing flag. +*/
+
+#ifndef SCOTCH_PTSCOTCH
+#define SCOTCH_PTSCOTCH
+#endif /* SCOTCH_PTSCOTCH */
+
+/*+ Integer type. +*/
+
+typedef int SCOTCH_Idx;
+
+typedef int SCOTCH_Num;
+
+#define SCOTCH_NUMMAX               ((int) (((unsigned int) 1 << ((sizeof (int) << 3) - 1)) - 1))
+#define SCOTCH_NUMSTRING            "%d"
+
+/*+ Strategy string parametrization values +*/
+
+#define SCOTCH_STRATQUALITY         1
+#define SCOTCH_STRATSPEED           2
+#define SCOTCH_STRATBALANCE         4
+#define SCOTCH_STRATSAFETY          8
+#define SCOTCH_STRATSCALABILITY     16
+
+/*+ Opaque objects. The dummy sizes of these
+objects, computed at compile-time by program
+"dummysizes", are given as double values for
+proper padding                               +*/
+
+typedef struct {
+  double                    dummy[5];
+} SCOTCH_Arch;
+
+#ifdef SCOTCH_PTSCOTCH
+typedef struct {
+  double                    dummy[30];
+} SCOTCH_Dgraph;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_DgraphHaloReq;
+
+typedef struct {
+  double                    dummy[9];
+} SCOTCH_Dmapping;
+
+typedef struct {
+  double                    dummy[6];
+} SCOTCH_Dordering;
+#endif /* SCOTCH_PTSCOTCH */
+
+typedef struct {
+  double                    dummy[2];
+} SCOTCH_Geom;
+
+typedef struct {
+  double                    dummy[14];
+} SCOTCH_Graph;
+
+typedef struct {
+  double                    dummy[15];
+} SCOTCH_Mesh;
+
+typedef struct {
+  double                    dummy[13];
+} SCOTCH_Mapping;
+
+typedef struct {
+  double                    dummy[12];
+} SCOTCH_Ordering;
+
+typedef struct {
+  double                    dummy[1];
+} SCOTCH_Strat;
+
+/*
+**  The function prototypes.
+*/
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+SCOTCH_Arch *               SCOTCH_archAlloc    (void);
+int                         SCOTCH_archInit     (SCOTCH_Arch * const);
+void                        SCOTCH_archExit     (SCOTCH_Arch * const);
+int                         SCOTCH_archLoad     (SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archSave     (const SCOTCH_Arch * const, FILE * const);
+int                         SCOTCH_archBuild    (SCOTCH_Arch * const, const SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Strat * const);
+char *                      SCOTCH_archName     (const SCOTCH_Arch * const);
+SCOTCH_Num                  SCOTCH_archSize     (const SCOTCH_Arch * const);
+int                         SCOTCH_archCmplt    (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archCmpltw   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_archHcub     (SCOTCH_Arch * const, const SCOTCH_Num);
+int                         SCOTCH_archMesh2    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archMesh3    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTleaf    (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+int                         SCOTCH_archTorus2   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archTorus3   (SCOTCH_Arch * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_archVcmplt   (SCOTCH_Arch * const);
+int                         SCOTCH_archVhcub    (SCOTCH_Arch * const);
+
+#ifdef SCOTCH_PTSCOTCH
+SCOTCH_Dgraph *             SCOTCH_dgraphAlloc  (void);
+int                         SCOTCH_dgraphInit   (SCOTCH_Dgraph * const, MPI_Comm);
+void                        SCOTCH_dgraphExit   (SCOTCH_Dgraph * const);
+void                        SCOTCH_dgraphFree   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphLoad   (SCOTCH_Dgraph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_dgraphSave   (SCOTCH_Dgraph * const, FILE * const);
+int                         SCOTCH_dgraphCheck  (const SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphBuild  (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphBuildGrid3D (SCOTCH_Dgraph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const int);
+int                         SCOTCH_dgraphGather (const SCOTCH_Dgraph * const, SCOTCH_Graph * const);
+int                         SCOTCH_dgraphScatter (SCOTCH_Dgraph * const, const SCOTCH_Graph * const);
+void                        SCOTCH_dgraphSize   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphData   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, MPI_Comm * const);
+int                         SCOTCH_dgraphStat   (const SCOTCH_Dgraph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_dgraphGhst   (SCOTCH_Dgraph * const);
+int                         SCOTCH_dgraphHalo   (SCOTCH_Dgraph * const, void * const, const MPI_Datatype);
+int                         SCOTCH_dgraphHaloAsync (SCOTCH_Dgraph * const, void * const, const MPI_Datatype, SCOTCH_DgraphHaloReq * const);
+SCOTCH_DgraphHaloReq *      SCOTCH_dgraphHaloReqAlloc (void);
+int                         SCOTCH_dgraphHaloWait (SCOTCH_DgraphHaloReq * const);
+int                         SCOTCH_dgraphMapInit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphMapExit (const SCOTCH_Dgraph * const, SCOTCH_Dmapping * const);
+int                         SCOTCH_dgraphMapSave (const SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapView (SCOTCH_Dgraph * const, const SCOTCH_Dmapping * const, FILE * const);
+int                         SCOTCH_dgraphMapCompute (SCOTCH_Dgraph * const, SCOTCH_Dmapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphMap     (SCOTCH_Dgraph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphPart    (SCOTCH_Dgraph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphCorderInit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_dgraphCorderExit (const SCOTCH_Dgraph * const, SCOTCH_Ordering * const);
+
+int                         SCOTCH_dgraphOrderInit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+void                        SCOTCH_dgraphOrderExit (const SCOTCH_Dgraph * const, SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderSave (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveBlock (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveMap (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderSaveTree (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, FILE * const);
+int                         SCOTCH_dgraphOrderPerm (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_dgraphOrderCblkDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const);
+int                         SCOTCH_dgraphOrderTreeDist (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_dgraphOrderCompute (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderComputeList (SCOTCH_Dgraph * const, SCOTCH_Dordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_dgraphOrderGather (const SCOTCH_Dgraph * const, const SCOTCH_Dordering * const, SCOTCH_Ordering * const);
+
+SCOTCH_Dmapping *           SCOTCH_dmapAlloc    (void);
+
+SCOTCH_Dordering *          SCOTCH_dorderAlloc  (void);
+#endif /* SCOTCH_PTSCOTCH */
+
+void                        SCOTCH_errorProg    (const char * const);
+void                        SCOTCH_errorPrint   (const char * const, ...);
+void                        SCOTCH_errorPrintW  (const char * const, ...);
+
+SCOTCH_Geom *               SCOTCH_geomAlloc    (void);
+int                         SCOTCH_geomInit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomExit     (SCOTCH_Geom * const);
+void                        SCOTCH_geomData     (const SCOTCH_Geom * const, SCOTCH_Num * const, double ** const);
+
+SCOTCH_Graph *              SCOTCH_graphAlloc   (void);
+int                         SCOTCH_graphInit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphExit    (SCOTCH_Graph * const);
+void                        SCOTCH_graphFree    (SCOTCH_Graph * const);
+int                         SCOTCH_graphLoad    (SCOTCH_Graph * const, FILE * const, const SCOTCH_Num, const SCOTCH_Num);
+int                         SCOTCH_graphSave    (const SCOTCH_Graph * const, FILE * const);
+int                         SCOTCH_graphBuild   (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const);
+SCOTCH_Num                  SCOTCH_graphBase    (SCOTCH_Graph * const, const SCOTCH_Num baseval);
+int                         SCOTCH_graphCheck   (const SCOTCH_Graph * const);
+void                        SCOTCH_graphSize    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphData    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const);
+void                        SCOTCH_graphStat    (const SCOTCH_Graph * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_graphGeomLoadChac (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadHabo (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadMmkt (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomLoadScot (SCOTCH_Graph * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveChac (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveMmkt (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_graphGeomSaveScot (const SCOTCH_Graph * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_graphMapInit (const SCOTCH_Graph * const, SCOTCH_Mapping * const, const SCOTCH_Arch * const, SCOTCH_Num * const);
+void                        SCOTCH_graphMapExit (const SCOTCH_Graph * const, SCOTCH_Mapping * const);
+int                         SCOTCH_graphMapLoad (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapSave (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapView (const SCOTCH_Graph * const, const SCOTCH_Mapping * const, FILE * const);
+int                         SCOTCH_graphMapCompute (SCOTCH_Graph * const, SCOTCH_Mapping * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphMap     (SCOTCH_Graph * const, const SCOTCH_Arch * const, SCOTCH_Strat * const, SCOTCH_Num * const);
+int                         SCOTCH_graphPart    (SCOTCH_Graph * const, const SCOTCH_Num, SCOTCH_Strat * const, SCOTCH_Num * const);
+
+int                         SCOTCH_graphOrderInit (const SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_graphOrderExit (const SCOTCH_Graph * const, SCOTCH_Ordering * const);
+int                         SCOTCH_graphOrderLoad (const SCOTCH_Graph * const, SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSave (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveMap (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderSaveTree (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrderCompute (SCOTCH_Graph * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderComputeList (SCOTCH_Graph * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_graphOrderFactor (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, SCOTCH_Graph * const);
+int                         SCOTCH_graphOrderView (const SCOTCH_Graph * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_graphOrder   (SCOTCH_Graph * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderList (SCOTCH_Graph * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_graphOrderCheck (const SCOTCH_Graph * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Mapping *            SCOTCH_mapAlloc     (void);
+
+void                        SCOTCH_memoryTrace  (void);
+void                        SCOTCH_memoryUntrace (void);
+void                        SCOTCH_memoryTraceReset (void);
+unsigned long               SCOTCH_memoryTraceGet (void);
+
+int                         SCOTCH_meshInit     (SCOTCH_Mesh * const);
+void                        SCOTCH_meshExit     (SCOTCH_Mesh * const);
+int                         SCOTCH_meshLoad     (SCOTCH_Mesh * const, FILE * const, const SCOTCH_Num);
+int                         SCOTCH_meshSave     (const SCOTCH_Mesh * const, FILE * const);
+int                         SCOTCH_meshBuild    (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num * const, const SCOTCH_Num, const SCOTCH_Num * const);
+int                         SCOTCH_meshCheck    (const SCOTCH_Mesh * const);
+void                        SCOTCH_meshSize     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshData     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num ** const, SCOTCH_Num * const, SCOTCH_Num ** const, SCOTCH_Num * const);
+void                        SCOTCH_meshStat     (const SCOTCH_Mesh * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const, SCOTCH_Num * const, SCOTCH_Num * const, double * const, double * const);
+int                         SCOTCH_meshGraph    (const SCOTCH_Mesh * const, SCOTCH_Graph * const);
+int                         SCOTCH_meshGeomLoadHabo (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomLoadScot (SCOTCH_Mesh * const, SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+int                         SCOTCH_meshGeomSaveScot (const SCOTCH_Mesh * const, const SCOTCH_Geom * const, FILE * const, FILE * const, const char * const);
+
+int                         SCOTCH_meshOrderInit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+void                        SCOTCH_meshOrderExit (const SCOTCH_Mesh * const, SCOTCH_Ordering * const);
+int                         SCOTCH_meshOrderSave (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveMap (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderSaveTree (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const, FILE * const);
+int                         SCOTCH_meshOrderCompute (SCOTCH_Mesh * const, SCOTCH_Ordering * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrderComputeList (SCOTCH_Mesh * const, SCOTCH_Ordering * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const);
+int                         SCOTCH_meshOrder    (SCOTCH_Mesh * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderList (SCOTCH_Mesh * const, const SCOTCH_Num, const SCOTCH_Num * const, SCOTCH_Strat * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const, SCOTCH_Num * const);
+int                         SCOTCH_meshOrderCheck (const SCOTCH_Mesh * const, const SCOTCH_Ordering * const);
+
+SCOTCH_Ordering *           SCOTCH_orderAlloc   (void);
+
+void                        SCOTCH_randomReset  (void);
+
+SCOTCH_Strat *              SCOTCH_stratAlloc   (void);
+int                         SCOTCH_stratInit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratExit    (SCOTCH_Strat * const);
+void                        SCOTCH_stratFree    (SCOTCH_Strat * const);
+int                         SCOTCH_stratSave    (const SCOTCH_Strat * const, FILE * const);
+#ifdef SCOTCH_PTSCOTCH
+int                         SCOTCH_stratDgraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratDgraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratDgraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+#endif /* SCOTCH_PTSCOTCH */
+int                         SCOTCH_stratGraphBipart (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMap (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphMapBuild (SCOTCH_Strat * const, const SCOTCH_Num, const SCOTCH_Num, const double);
+int                         SCOTCH_stratGraphOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratGraphOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+int                         SCOTCH_stratMeshOrder (SCOTCH_Strat * const, const char * const);
+int                         SCOTCH_stratMeshOrderBuild (SCOTCH_Strat * const, const SCOTCH_Num, const double);
+
+void                        SCOTCH_version      (int * const, int * const, int * const);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/src/libscotch/scotchf.h_mingw32_ b/src/libscotch/scotchf.h_mingw32_
new file mode 100644
index 0000000..92069ec
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw32_
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : ptscotchf.h                             **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 1)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 1)
+        PARAMETER (SCOTCH_GEOMDIM          = 1)
+        PARAMETER (SCOTCH_GRAPHDIM         = 8)
+        PARAMETER (SCOTCH_MAPDIM           = 11)
+        PARAMETER (SCOTCH_MESHDIM          = 10)
+        PARAMETER (SCOTCH_ORDERDIM         = 8)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw32_MPICH b/src/libscotch/scotchf.h_mingw32_MPICH
new file mode 100644
index 0000000..6a7552b
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw32_MPICH
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : scotchf.h                               **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 20)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 4)
+        PARAMETER (SCOTCH_GEOMDIM          = 1)
+        PARAMETER (SCOTCH_GRAPHDIM         = 9)
+        PARAMETER (SCOTCH_MAPDIM           = 11)
+        PARAMETER (SCOTCH_MESHDIM          = 10)
+        PARAMETER (SCOTCH_ORDERDIM         = 8)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw32_MSMPI b/src/libscotch/scotchf.h_mingw32_MSMPI
new file mode 100644
index 0000000..6a7552b
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw32_MSMPI
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : scotchf.h                               **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 20)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 4)
+        PARAMETER (SCOTCH_GEOMDIM          = 1)
+        PARAMETER (SCOTCH_GRAPHDIM         = 9)
+        PARAMETER (SCOTCH_MAPDIM           = 11)
+        PARAMETER (SCOTCH_MESHDIM          = 10)
+        PARAMETER (SCOTCH_ORDERDIM         = 8)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw32_OPENMPI b/src/libscotch/scotchf.h_mingw32_OPENMPI
new file mode 100644
index 0000000..6a7552b
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw32_OPENMPI
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : scotchf.h                               **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 20)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 4)
+        PARAMETER (SCOTCH_GEOMDIM          = 1)
+        PARAMETER (SCOTCH_GRAPHDIM         = 9)
+        PARAMETER (SCOTCH_MAPDIM           = 11)
+        PARAMETER (SCOTCH_MESHDIM          = 10)
+        PARAMETER (SCOTCH_ORDERDIM         = 8)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw64_ b/src/libscotch/scotchf.h_mingw64_
new file mode 100644
index 0000000..5bb3f80
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw64_
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : ptscotchf.h                             **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 1)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 1)
+        PARAMETER (SCOTCH_GEOMDIM          = 2)
+        PARAMETER (SCOTCH_GRAPHDIM         = 12)
+        PARAMETER (SCOTCH_MAPDIM           = 13)
+        PARAMETER (SCOTCH_MESHDIM          = 15)
+        PARAMETER (SCOTCH_ORDERDIM         = 12)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw64_MPICH b/src/libscotch/scotchf.h_mingw64_MPICH
new file mode 100644
index 0000000..89d4de9
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw64_MPICH
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : scotchf.h                               **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 29)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 5)
+        PARAMETER (SCOTCH_GEOMDIM          = 2)
+        PARAMETER (SCOTCH_GRAPHDIM         = 14)
+        PARAMETER (SCOTCH_MAPDIM           = 13)
+        PARAMETER (SCOTCH_MESHDIM          = 15)
+        PARAMETER (SCOTCH_ORDERDIM         = 12)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw64_MSMPI b/src/libscotch/scotchf.h_mingw64_MSMPI
new file mode 100644
index 0000000..89d4de9
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw64_MSMPI
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : scotchf.h                               **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 29)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 5)
+        PARAMETER (SCOTCH_GEOMDIM          = 2)
+        PARAMETER (SCOTCH_GRAPHDIM         = 14)
+        PARAMETER (SCOTCH_MAPDIM           = 13)
+        PARAMETER (SCOTCH_MESHDIM          = 15)
+        PARAMETER (SCOTCH_ORDERDIM         = 12)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotch/scotchf.h_mingw64_OPENMPI b/src/libscotch/scotchf.h_mingw64_OPENMPI
new file mode 100644
index 0000000..b59034d
--- /dev/null
+++ b/src/libscotch/scotchf.h_mingw64_OPENMPI
@@ -0,0 +1,94 @@
+!* Copyright 2004,2007,2009,2010 ENSEIRB, INRIA & CNRS
+!*
+!* This file is part of the Scotch software package for static mapping,
+!* graph partitioning and sparse matrix ordering.
+!*
+!* This software is governed by the CeCILL-C license under French law
+!* and abiding by the rules of distribution of free software. You can
+!* use, modify and/or redistribute the software under the terms of the
+!* CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
+!* URL: "http://www.cecill.info".
+!* 
+!* As a counterpart to the access to the source code and rights to copy,
+!* modify and redistribute granted by the license, users are provided
+!* only with a limited warranty and the software's author, the holder of
+!* the economic rights, and the successive licensors have only limited
+!* liability.
+!* 
+!* In this respect, the user's attention is drawn to the risks associated
+!* with loading, using, modifying and/or developing or reproducing the
+!* software by the user in light of its specific status of free software,
+!* that may mean that it is complicated to manipulate, and that also
+!* therefore means that it is reserved for developers and experienced
+!* professionals having in-depth computer knowledge. Users are therefore
+!* encouraged to load and test the software's suitability as regards
+!* their requirements in conditions enabling the security of their
+!* systems and/or data to be ensured and, more generally, to use and
+!* operate it in the same conditions as regards security.
+!* 
+!* The fact that you are presently reading this means that you have had
+!* knowledge of the CeCILL-C license and that you accept its terms.
+!*
+!***********************************************************
+!*                                                        **
+!*   NAME       : scotchf.h                               **
+!*                                                        **
+!*   AUTHOR     : Francois PELLEGRINI                     **
+!*                                                        **
+!*   FUNCTION   : FORTRAN declaration file for the        **
+!*                LibScotch static mapping and sparse     **
+!*                matrix block ordering sequential        **
+!*                library.                                **
+!*                                                        **
+!*   DATES      : # Version 3.4  : from : 04 feb 2000     **
+!*                                 to     22 oct 2001     **
+!*                # Version 4.0  : from : 16 jan 2004     **
+!*                                 to     16 jan 2004     **
+!*                # Version 5.0  : from : 26 apr 2006     **
+!*                                 to     26 apr 2006     **
+!*                # Version 5.1  : from : 26 mar 2009     **
+!*                                 to     24 jul 2010     **
+!*                                                        **
+!***********************************************************
+
+!* Flag definitions for the strategy
+!* string selection routines.
+
+        INTEGER SCOTCH_STRATQUALITY
+        INTEGER SCOTCH_STRATSPEED
+        INTEGER SCOTCH_STRATBALANCE
+        INTEGER SCOTCH_STRATSCALABILITY
+        INTEGER SCOTCH_STRATSAFETY
+        PARAMETER (SCOTCH_STRATQUALITY     = 1)
+        PARAMETER (SCOTCH_STRATSPEED       = 2)
+        PARAMETER (SCOTCH_STRATBALANCE     = 4)
+        PARAMETER (SCOTCH_STRATSAFETY      = 8)
+        PARAMETER (SCOTCH_STRATSCALABILITY = 16)
+
+!* Size definitions for the SCOTCH opaque
+!* structures. These structures must be
+!* allocated as arrays of DOUBLEPRECISION
+!* values for proper padding. The dummy
+!* sizes are computed at compile-time by
+!* program "dummysizes".
+
+        INTEGER SCOTCH_ARCHDIM
+        INTEGER SCOTCH_DGRAPHDIM
+        INTEGER SCOTCH_DGRAPHHALOREQDIM
+        INTEGER SCOTCH_DORDERDIM
+        INTEGER SCOTCH_GEOMDIM
+        INTEGER SCOTCH_GRAPHDIM
+        INTEGER SCOTCH_MAPDIM
+        INTEGER SCOTCH_MESHDIM
+        INTEGER SCOTCH_ORDERDIM
+        INTEGER SCOTCH_STRATDIM
+        PARAMETER (SCOTCH_ARCHDIM          = 5)
+        PARAMETER (SCOTCH_DGRAPHDIM        = 30)
+        PARAMETER (SCOTCH_DGRAPHHALOREQDIM = 1)
+        PARAMETER (SCOTCH_DORDERDIM        = 6)
+        PARAMETER (SCOTCH_GEOMDIM          = 2)
+        PARAMETER (SCOTCH_GRAPHDIM         = 14)
+        PARAMETER (SCOTCH_MAPDIM           = 13)
+        PARAMETER (SCOTCH_MESHDIM          = 15)
+        PARAMETER (SCOTCH_ORDERDIM         = 12)
+        PARAMETER (SCOTCH_STRATDIM         = 1)
diff --git a/src/libscotchmetis/Makefile b/src/libscotchmetis/Makefile
index d81d02c..024e813 100644
--- a/src/libscotchmetis/Makefile
+++ b/src/libscotchmetis/Makefile
@@ -40,11 +40,15 @@ libdir		= ../../lib
 
 include ../Makefile.inc
 
+LIBLDFLAGS_PT  ?= $(LIBLDFLAGS)
+LDFLAGS_PT ?= $(LDFLAGS)
+CPLIB  ?= $(LIB)
+
 %$(OBJ)	:	%.c
-				$(CC) $(CFLAGS) $(CLIBFLAGS) -I$(includedir) -I../libscotch -c $(<) -o $(@)
+				$(CC) $(CFLAGS) $(CLIBFLAGS) -I$(includedir) -I../libscotch -c $(<) -o $(@) $(LDFLAGSX)
 
 %$(EXE)	:	%.c
-		 		$(CC) $(CFLAGS) -I$(includedir) -I../libscotch $(<) -o $(@) -L$(libdir) $(LDFLAGS)
+		 		$(CC) $(CFLAGS) -I$(includedir) -I../libscotch $(<) -o $(@) -L$(libdir) $(LDFLAGSX)
 
 ##
 ##  Project rules.
@@ -62,14 +66,14 @@ ptscotch			:
 
 install				:	scotch
 					-$(CP) metis.h $(includedir)
-					-$(CP) libscotchmetis$(LIB) $(libdir)
+					-$(CP) libscotchmetis$(CPLIB) $(libdir)
 
 ptinstall			:	ptscotch
 					-$(CP) parmetis.h $(includedir)
-					-$(CP) libptscotchparmetis$(LIB) $(libdir)
+					-$(CP) libptscotchparmetis$(CPLIB) $(libdir)
 
 clean				:
-					-$(RM) *~ *$(OBJ) lib*$(LIB)
+					-$(RM) *~ *$(OBJ) lib*$(LIB) lib*.def lib*.a
 
 realclean			:	clean
 
@@ -129,12 +133,12 @@ libptscotchparmetis$(LIB)	:	parmetis_dgraph_order$(OBJ)		\
 					parmetis_dgraph_order_f$(OBJ)		\
 					parmetis_dgraph_part$(OBJ)		\
 					parmetis_dgraph_part_f$(OBJ)
-					$(AR) $(ARFLAGS) $(@) $(^)
+					$(AR) $(ARFLAGS) $(@) $(^) $(ARPMFLAGS)
 					-$(RANLIB) $(@)
 
 libscotchmetis$(LIB)		:	metis_graph_order$(OBJ)			\
 					metis_graph_order_f$(OBJ)		\
 					metis_graph_part$(OBJ)			\
 					metis_graph_part_f$(OBJ)
-					$(AR) $(ARFLAGS) $(@) $(^)
+					$(AR) $(ARFLAGS) $(@) $(^) $(ARSMFLAGS)
 					-$(RANLIB) $(@)
diff --git a/src/scotch/Makefile b/src/scotch/Makefile
index 6179afd..ef50d23 100644
--- a/src/scotch/Makefile
+++ b/src/scotch/Makefile
@@ -40,14 +40,22 @@ libdir		= ../../lib
 
 include ../Makefile.inc
 
+LDFLAGS_PT ?= $(LDFLAGS)
+
+ifeq ("$(SCOTCHLIB)","ptscotch")
+LDFLAGSX = $(LDFLAGS_PT)
+else
+LDFLAGSX = $(LDFLAGS)
+endif
+
 %$(EXE)	:	%$(OBJ)
-		 		$(CC) $(CFLAGS) -I$(includedir) -I../libscotch $(<) -o $(@) -L$(libdir) -l$(SCOTCHLIB) -l$(SCOTCHLIB)errexit $(LDFLAGS)
+		 		$(CC) $(CFLAGS) -I$(includedir) -I../libscotch $(<) -o $(@) -L$(libdir) -l$(SCOTCHLIB) -l$(SCOTCHLIB)errexit $(LDFLAGSX)
 
 %$(OBJ)	:	%.c
-				$(CC) $(CFLAGS) -I$(includedir) -I../libscotch -c $(<) -o $(@)
+				$(CC) $(CFLAGS) -I$(includedir) -I../libscotch -c $(<) -o $(@) $(LDFLAGSX)
 
 %$(EXE)	:	%.c
-		 		$(CC) $(CFLAGS) -I$(includedir) -I../libscotch $(<) -o $(@) -L$(libdir) -l$(SCOTCHLIB) -l$(SCOTCHLIB)errexit $(LDFLAGS)
+		 		$(CC) $(CFLAGS) -I$(includedir) -I../libscotch $(<) -o $(@) -L$(libdir) -l$(SCOTCHLIB) -l$(SCOTCHLIB)errexit $(LDFLAGSX)
 
 ##
 ##  Project rules.
